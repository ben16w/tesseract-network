---
- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - whalewall_version is not none

- name: Ensure required packages are installed.
  ansible.builtin.package:
    name:
      - curl
      - tar
      - nftables
    update_cache: true

- name: Download Whalewall binary.
  ansible.builtin.get_url:
    url: "{{ whalewall_download_url }}"
    dest: "/tmp/whalewall.tar.gz"
    mode: '0644'
    owner: root
    group: root

- name: Ensure Whalewall directory exists in opt.
  ansible.builtin.file:
    path: /opt/whalewall
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Extract Whalewall binary.
  ansible.builtin.unarchive:
    src: /tmp/whalewall.tar.gz
    dest: /opt/whalewall
    remote_src: true
    creates: /opt/whalewall/whalewall

- name: Set permissions for Whalewall binary.
  ansible.builtin.file:
    path: /opt/whalewall/whalewall
    mode: '0755'
    owner: root
    group: root

- name: Template Whalewall service file.
  ansible.builtin.template:
    src: whalewall.service.j2
    dest: /etc/systemd/system/whalewall.service
    mode: '0644'
    owner: root
    group: root

- name: Enable and start Whalewall service.
  ansible.builtin.service:
    name: whalewall
    enabled: true
    state: started


- name: If Whalewall rules are provided.
  when: whalewall_rules is not none
  block:
    - name: Get list of all running containers.
      ansible.builtin.command:
        cmd: docker ps -q
      register: running_containers
      changed_when: false

    - name: Set Whalewall labels for all running containers
      ansible.builtin.command:
        cmd: >
          docker container update
          --label whalewall.enabled=true
          --label whalewall.rules="{{ whalewall_rules | to_json }}"
          {{ item }}
      loop: "{{ running_containers.stdout_lines }}"
      when: running_containers.stdout_lines | length > 0