---
- name: Verify
  hosts: all
  vars_files:
    - ../../defaults/main.yml
  tasks:
    - name: Set verify variables.
      ansible.builtin.set_fact:
        tesseract_hostname: "localhost"

    - name: Check Blocky service is running.
      ansible.builtin.systemd:
        name: blocky
        state: started
        enabled: true
      register: blocky_service_status
      failed_when: blocky_service_status.failed

    - name: Check Blocky service logs for errors.
      ansible.builtin.shell:
        cmd: "set -o pipefail && journalctl -u blocky.service | grep -E 'ERROR|FATAL'"
      register: blocky_logs
      failed_when: blocky_logs.stdout != ""
      changed_when: false

    - name: Check Blocky is listening on HTTP port.
      ansible.builtin.uri:
        url: http://{{ tesseract_hostname }}:{{ blocky_http_port }}
        status_code: 200
      register: blocky_status
      retries: 5
      delay: 10
      until: blocky_status.status == 200

    - name: Perform a DNS query using Blocky API.
      ansible.builtin.uri:
        url: "http://{{ tesseract_hostname }}:{{ blocky_http_port }}/api/query"
        method: POST
        body_format: json
        body:
          query: "google.com"
          type: "A"
        headers:
          Content-Type: "application/json"
        return_content: true
      register: dns_response
      failed_when: dns_response.status != 200

    - name: Check DNS query response was successful.
      ansible.builtin.assert:
        that:
          - dns_response.json.responseType == "RESOLVED"
          - dns_response.json.returnCode == "NOERROR"

    - name: Perform a DNS query to a blocked domain using Blocky API.
      ansible.builtin.uri:
        url: "http://{{ tesseract_hostname }}:{{ blocky_http_port }}/api/query"
        method: POST
        body_format: json
        body:
          query: "trustsoft.com"
          type: "A"
        headers:
          Content-Type: "application/json"
        return_content: true
      register: dns_response
      failed_when: dns_response.status != 200

    - name: Check the DNS query response was blocked.
      ansible.builtin.assert:
        that:
          - dns_response.json.responseType == "BLOCKED"
          - dns_response.json.returnCode == "NOERROR"

    - name: Perform a DNS query to a another blocked domain using Blocky API.
      ansible.builtin.uri:
        url: "http://{{ tesseract_hostname }}:{{ blocky_http_port }}/api/query"
        method: POST
        body_format: json
        body:
          query: "coolright.com"
          type: "A"
        headers:
          Content-Type: "application/json"
        return_content: true
      register: dns_response
      failed_when: dns_response.status != 200

    - name: Check the DNS query response was blocked.
      ansible.builtin.assert:
        that:
          - dns_response.json.responseType == "BLOCKED"
          - dns_response.json.returnCode == "NOERROR"
